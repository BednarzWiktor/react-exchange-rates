{"version":3,"sources":["enums/index.ts","features/exchangeRates/slice.ts","redux/store.ts","utils/index.ts","redux/selectors/exchangeRates/index.ts","redux/methods/exchangeRates/index.ts","exchangeRatesAPI/index.ts","components/ExchangeRatesTable/index.tsx","features/exchangeRates/ConnectedExchangeRatesTable/index.tsx","components/SearchableSelect/index.tsx","components/NumberInput/index.tsx","features/exchangeRates/Controls/index.tsx","components/Modal/index.tsx","components/DateSelect/index.tsx","components/ProgressionIcon/index.tsx","features/exchangeRates/HistoryModal/index.tsx","App.tsx","serviceWorker.ts","index.tsx","features/exchangeRates/HistoryModal/index.module.scss","components/ExchangeRatesTable/index.module.scss","components/SearchableSelect/index.module.scss","features/exchangeRates/Controls/index.module.scss","App.module.scss"],"names":["CurrenciesEnum","initialState","baseCurrency","EUR","rateHistorySearchConfig","dateFrom","Date","dateTo","targetCurrency","amount","result","exchangeRates","rateHistory","isLoading","createSlice","name","reducers","setBaseCurrency","state","action","payload","updateRateHistorySearchConfig","setAmount","setResultExchangeRates","resultExchangeRates","setResultRateHistory","resultRateHistory","setIsLoadingByTarget","target","actions","exchangeRatesInitialState","rootReducer","combineReducers","exchangeRatesReducer","persistConfig","key","storage","store","configureStore","reducer","persistReducer","devTools","process","preloadedState","middleware","thunk","persistor","persistStore","adjustMonthOrDay","monthOrDay","length","processDateToString","inputDate","date","getFullYear","getMonth","getDate","join","joinEstablishedQueries","establishedQueries","constructGetLatestQuery","base","symbols","filter","query","constructGetHistoryQuery","dateStringifiedFrom","dateStringifiedTo","translateExchangeRates","rates","Object","entries","map","currency","rate","translateHistoryRates","value","values","getRateProgression","earliestOldest","earliest","oldest","prefix","progression","Math","abs","toFixed","selectResultExchangeRates","selectExchangeRatesTableRows","createSelector","resultExhangeRates","exchangeRate","generateTableRows","selectIsExchangeRatesIsFetched","selectRateHistorySummary","earliestAndOldest","minBy","maxBy","eRAPI","baseUrl","getLatest","config","a","axios","get","clsx","data","getHistory","exchangeRatesAPI","fetchExchangeRates","dispatch","translatedRates","updateSearchConfig","useStyles","makeStyles","root","width","container","height","ExchangeRatesTable","rows","viewHistory","classes","Paper","className","elevation","TableContainer","styles","spinner","CircularProgress","Table","stickyHeader","aria-label","TableHead","TableRow","TableCell","align","TableBody","row","component","scope","option","toLowerCase","flag","num","decimals","roundNumberToXDecimals","IconButton","onClick","size","color","mapDispatch","connect","exchangeRatesTableRows","isFetched","useEffect","SearchableSelect","setValue","options","label","disableClearable","useState","inputValue","setInputValue","Autocomplete","onChange","event","newValue","onInputChange","newInputValue","clearOnBlur","renderInput","props","TextField","variant","InputProps","startAdornment","renderOption","NumberInput","id","type","inputProps","min","changeAmount","autocomplete","number","theme","modal","display","alignItems","justifyContent","paper","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","Modal","description","isOpen","close","children","aria-labelledby","aria-describedby","open","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","DateSelect","minDate","maxDate","selectedDate","setSelectedDate","utils","DateFnsUtils","required","disableToolbar","format","margin","KeyboardButtonProps","ProgressionIcon","TrendingDown","fontSize","TrendingFlat","TrendingUp","style","fetchRateHistory","searchConfig","clearRateHistory","historySummary","cachedDateFrom","setCachedDateFrom","cachedDateTo","setCachedDateTo","cachedTargetCurrency","setCachedTargetCurrency","isSearchActionBlocked","isNaN","getTime","Container","header","title","Typography","noWrap","titleAdorment","ArrowRight","controls","input","button","Button","startIcon","Search","disabled","main","dates","App","loading","maxWidth","section","table","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.cfdc0959.chunk.js","sourcesContent":["export enum CurrenciesEnum {\r\n    EUR = \"EUR\",\r\n    CAD = \"CAD\",\r\n    HKD = \"HKD\",\r\n    ISK = \"ISK\",\r\n    PHP = \"PHP\",\r\n    DKK = \"DKK\",\r\n    HUF = \"HUF\",\r\n    CZK = \"CZK\",\r\n    AUD = \"AUD\",\r\n    RON = \"RON\",\r\n    SEK = \"SEK\",\r\n    IDR = \"IDR\",\r\n    INR = \"INR\",\r\n    BRL = \"BRL\",\r\n    RUB = \"RUB\",\r\n    HRK = \"HRK\",\r\n    JPY = \"JPY\",\r\n    THB = \"THB\",\r\n    CHF = \"CHF\",\r\n    SGD = \"SGD\",\r\n    PLN = \"PLN\",\r\n    BGN = \"BGN\",\r\n    TRY = \"TRY\",\r\n    CNY = \"CNY\",\r\n    NOK = \"NOK\",\r\n    NZD = \"NZD\",\r\n    ZAR = \"ZAR\",\r\n    USD = \"USD\",\r\n    MXN = \"MXN\",\r\n    ILS = \"ILS\",\r\n    GBP = \"GBP\",\r\n    KRW = \"KRW\",\r\n    MYR = \"MYR\"\r\n}","import { CurrenciesEnum } from '../../enums';\r\nimport {\r\n    ISliceState,\r\n    ISetBaseCurrencyAction,\r\n    IUpdateRateHistorySearchConfigAction,\r\n    ISetAmountAction,\r\n    ISetIsLoadingByTargetAction,\r\n    ISetResultExchangeRatesAction,\r\n    ISetResultRateHistoryAction\r\n} from '../../types/features/searchConfig';\r\n\r\nimport { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const initialState: ISliceState = {\r\n    baseCurrency: CurrenciesEnum.EUR,\r\n    rateHistorySearchConfig: {\r\n        dateFrom: new Date('2020-01-1'),\r\n        dateTo: new Date(),\r\n        targetCurrency: null,\r\n    },\r\n    amount: 1.00,\r\n    result: {\r\n        exchangeRates: [],\r\n        rateHistory: []\r\n    },\r\n    isLoading: {\r\n        exchangeRates: false,\r\n        rateHistory: false\r\n    },\r\n};\r\n\r\nconst exchangeRates = createSlice({\r\n    name: 'exchangeRates',\r\n    initialState,\r\n    reducers: {\r\n        setBaseCurrency(state, action) {\r\n            const { baseCurrency }: ISetBaseCurrencyAction = action.payload;\r\n\r\n            state.baseCurrency = baseCurrency;\r\n        },\r\n        updateRateHistorySearchConfig(state, action) {\r\n            const rateHistorySearchConfig: IUpdateRateHistorySearchConfigAction = action.payload;\r\n\r\n            state.rateHistorySearchConfig = {\r\n                ...state.rateHistorySearchConfig,\r\n                ...rateHistorySearchConfig\r\n            };\r\n        },\r\n        setAmount(state, action) {\r\n            const { amount }: ISetAmountAction = action.payload;\r\n\r\n            state.amount = amount\r\n        },\r\n        setResultExchangeRates(state, action) {\r\n            const { resultExchangeRates }: ISetResultExchangeRatesAction = action.payload;\r\n\r\n            state.result.exchangeRates = resultExchangeRates;\r\n        },\r\n        setResultRateHistory(state, action) {\r\n            const { resultRateHistory }: ISetResultRateHistoryAction = action.payload;\r\n\r\n            state.result.rateHistory = resultRateHistory;\r\n        },\r\n        setIsLoadingByTarget(state, action) {\r\n            const { target, isLoading }: ISetIsLoadingByTargetAction = action.payload;\r\n\r\n            state.isLoading[target] = isLoading;\r\n        }\r\n    }\r\n});\r\n\r\nexport const {\r\n    setBaseCurrency,\r\n    setAmount,\r\n    updateRateHistorySearchConfig,\r\n    setResultExchangeRates,\r\n    setResultRateHistory,\r\n    setIsLoadingByTarget\r\n} = exchangeRates.actions;\r\n\r\nexport default exchangeRates.reducer;","import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\r\nimport { persistReducer, persistStore} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport exchangeRatesReducer, { initialState as exchangeRatesInitialState } from '../features/exchangeRates/slice';\r\n\r\nconst initialState = {\r\n    exchangeRates: exchangeRatesInitialState\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n    exchangeRates: exchangeRatesReducer\r\n});\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage\r\n};\r\n\r\nexport const store = configureStore({\r\n    reducer: persistReducer(persistConfig, rootReducer),\r\n    devTools: process.env.NODE_ENV !== 'production',\r\n    preloadedState: initialState,\r\n    middleware: [thunk]\r\n});\r\n\r\nexport const persistor = persistStore(store);","import { minBy, maxBy } from 'lodash';\r\n\r\nimport { IExchangeRatesLatestArgs, IExchangeRatesHistoryArgs } from '../types/global';\r\nimport { IExchangeRate, IExchangeRateRow, IEarliestOldestRates, IRateHistoryPoint } from '../types/features/searchConfig';\r\n\r\nexport const roundNumberToXDecimals = (num: number, decimals: number = 3): string =>\r\n    num.toFixed(decimals)\r\n;\r\n\r\nexport const adjustMonthOrDay = (monthOrDay: string): string =>\r\n    monthOrDay.length < 2 ? `0${monthOrDay}` : monthOrDay\r\n;\r\n\r\nexport const processDateToString = (inputDate: Date): string => {\r\n    const date = new Date(inputDate);\r\n    const year = date.getFullYear();\r\n    const month = adjustMonthOrDay(`${date.getMonth() + 1}`);\r\n    const day = adjustMonthOrDay(`${date.getDate()}`);\r\n\r\n    return [ year, month, day ].join('-');\r\n};\r\n\r\nexport const joinEstablishedQueries = (\r\n    establishedQueries: Array<string> | null\r\n): string | null =>\r\n    establishedQueries && establishedQueries.length > 0\r\n        ? `?${establishedQueries.join('&')}`\r\n        : null\r\n; \r\n\r\nexport const constructGetLatestQuery = ({\r\n    base,\r\n    symbols\r\n}: IExchangeRatesLatestArgs): string | null => {\r\n    const baseQuery = base && `base=${base}`;\r\n    const symbolsQuery = symbols && `symbols=${symbols}`;\r\n    const establishedQueries = [ baseQuery, symbolsQuery ]\r\n        .filter(query => !!query) as Array<string>\r\n    ;\r\n\r\n    return joinEstablishedQueries(establishedQueries);\r\n};\r\n\r\nexport const constructGetHistoryQuery = ({\r\n    base,\r\n    symbols,\r\n    dateStringifiedFrom,\r\n    dateStringifiedTo\r\n}: IExchangeRatesHistoryArgs): string | null => {\r\n    const baseQuery = base && `base=${base}`;\r\n    const symbolsQuery = symbols && `symbols=${symbols}`;\r\n    const startAtQuery = dateStringifiedFrom && `start_at=${dateStringifiedFrom}`;\r\n    const endAtQuery = dateStringifiedTo && `end_at=${dateStringifiedTo}`;\r\n    const establishedQueries = [ baseQuery, symbolsQuery, startAtQuery, endAtQuery ]\r\n        .filter(query => !!query) as Array<string>\r\n    ;\r\n\r\n    return joinEstablishedQueries(establishedQueries);\r\n};\r\n\r\nexport const translateExchangeRates = (rates: object): Array<any> =>\r\n    Object.entries(rates).map(([ key, value ]) => ({ currency: key, rate: value }))\r\n;\r\n\r\nexport const translateHistoryRates = (rates: object): Array<any> =>\r\n    Object.entries(rates).map(([ key, value ]) => ({ date: key, rate: Object.values(value)[0] }))\r\n;\r\n\r\nexport const generateTableRows = (exchangeRates: Array<IExchangeRate>, amount: number, baseCurrency: string): Array<IExchangeRateRow> =>\r\n    exchangeRates\r\n        .map(exchangeRate => ({\r\n            ...exchangeRate,\r\n            value: amount * exchangeRate.rate,\r\n        }))\r\n        .filter(exchangeRate => exchangeRate.currency !== baseCurrency)\r\n;\r\n\r\nexport const getEarliestOrOldestRate = (exchangeRates: Array<IRateHistoryPoint>): IEarliestOldestRates | null => {\r\n    if (exchangeRates.length <= 2) return null;\r\n\r\n    const earliestRate = minBy(exchangeRates, 'date') as IRateHistoryPoint;\r\n    const oldestRate = maxBy(exchangeRates, 'date') as IRateHistoryPoint;\r\n\r\n    return {\r\n        earliest: earliestRate,\r\n        oldest: oldestRate\r\n    };\r\n};\r\n\r\nexport const getRateProgression = (earliestOldest: IEarliestOldestRates): string | null => {\r\n    if (!earliestOldest) return null;\r\n\r\n    const { earliest, oldest } = earliestOldest;\r\n    if (earliest.rate === oldest.rate) return '0%';\r\n\r\n    const prefix = earliest.rate > oldest.rate ? '-' : '';\r\n    const progression = Math.abs(((earliest.rate - oldest.rate) / oldest.rate) * 100).toFixed(2);\r\n    return `${prefix}${progression}%`;\r\n}","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nimport {\r\n    generateTableRows,\r\n    getEarliestOrOldestRate,\r\n    getRateProgression\r\n} from '../../../utils';\r\n\r\nconst selectBaseCurrency = (state: any) => state.exchangeRates.baseCurrency;\r\nconst selectResultExchangeRates = (state: any) => state.exchangeRates.result.exchangeRates;\r\nconst selectResultRateHistory = (state: any) => state.exchangeRates.result.rateHistory;\r\nconst selectAmount = (state: any) => state.exchangeRates.amount;\r\n\r\nexport const selectExchangeRatesTableRows = createSelector(\r\n    selectResultExchangeRates,\r\n    selectAmount,\r\n    selectBaseCurrency,\r\n    (resultExhangeRates, amount, baseCurrency) => generateTableRows(resultExhangeRates, amount, baseCurrency)\r\n);\r\n\r\nexport const selectIsExchangeRatesIsFetched = createSelector(\r\n    selectResultExchangeRates,\r\n    resultExchangeRates => resultExchangeRates.length > 0 ? true : false\r\n);\r\n\r\nexport const selectRateHistorySummary = createSelector(\r\n    selectResultRateHistory,\r\n    resultRateHistory => {\r\n        const earliestAndOldest = getEarliestOrOldestRate(resultRateHistory);\r\n\r\n        return earliestAndOldest ? {\r\n            ...earliestAndOldest,\r\n            progression: getRateProgression(earliestAndOldest)\r\n        } : null;\r\n    }\r\n);","import { Dispatch } from '@reduxjs/toolkit';\r\n\r\nimport {\r\n    setBaseCurrency,\r\n    setResultExchangeRates,\r\n    setResultRateHistory,\r\n    setIsLoadingByTarget,\r\n    setAmount,\r\n    updateRateHistorySearchConfig\r\n} from '../../../features/exchangeRates/slice';\r\n\r\nimport { exchangeRatesAPI } from '../../../exchangeRatesAPI';\r\nimport {\r\n    translateExchangeRates,\r\n    processDateToString,\r\n    translateHistoryRates \r\n} from '../../../utils';\r\n\r\nimport { IUpdateRateHistorySearchConfigAction } from '../../../types/features/searchConfig';\r\nimport { CurrenciesEnum } from '../../../enums';\r\n\r\nconst eRAPI = exchangeRatesAPI();\r\n\r\nexport const fetchExchangeRates = (baseCurrency: CurrenciesEnum) => async (dispatch: Dispatch) => {\r\n    dispatch(setIsLoadingByTarget({ target: 'exchangeRates', isLoading: true }));\r\n\r\n    const payload = await eRAPI.getLatest({ base: baseCurrency });\r\n\r\n    if (payload) {\r\n        const { rates, base } = payload;\r\n        const translatedRates = translateExchangeRates(rates);\r\n\r\n        dispatch(setBaseCurrency({ baseCurrency: base }));\r\n        dispatch(setResultExchangeRates({ resultExchangeRates: translatedRates }));\r\n    }\r\n\r\n    dispatch(setIsLoadingByTarget({ target: 'exchangeRates', isLoading: false }));\r\n};\r\n\r\nexport const changeAmount = (amount: number) => (dispatch: Dispatch) => {\r\n    dispatch(setAmount({ amount: amount }));\r\n};\r\n\r\nexport const updateSearchConfig = (config: IUpdateRateHistorySearchConfigAction) => (dispatch: Dispatch) => {\r\n    dispatch(updateRateHistorySearchConfig(config));\r\n};\r\n\r\nexport const fetchRateHistory = (config: IUpdateRateHistorySearchConfigAction, baseCurrency: CurrenciesEnum) => async (dispatch: Dispatch) => {\r\n    dispatch(setIsLoadingByTarget({ target: 'rateHistory', isLoading: true }));\r\n\r\n    const searchConfig = {\r\n        dateStringifiedFrom: processDateToString(config.dateFrom!),\r\n        dateStringifiedTo: processDateToString(config.dateTo!),\r\n        symbols: config.targetCurrency,\r\n        base: baseCurrency\r\n    };\r\n\r\n    const payload = await eRAPI.getHistory(searchConfig);\r\n\r\n    if (payload) {\r\n        const { rates } = payload;\r\n        const translatedRates = translateHistoryRates(rates);\r\n\r\n        dispatch(setResultRateHistory({ resultRateHistory: translatedRates }));\r\n    }\r\n    dispatch(setIsLoadingByTarget({ target: 'rateHistory', isLoading: false }));\r\n};\r\n\r\nexport const clearRateHistory = () => (dispatch: Dispatch) => {\r\n    dispatch(setResultRateHistory({ resultRateHistory: [] }));\r\n}","import axios from 'axios';\r\nimport clsx from 'clsx';\r\n\r\nimport { constructGetLatestQuery, constructGetHistoryQuery } from '../utils';\r\n\r\nimport { IExchangeRatesLatestArgs, IExchangeRatesHistoryArgs } from '../types/global';\r\n\r\nexport const exchangeRatesAPI = () => {\r\n    const baseUrl = 'https://api.exchangeratesapi.io';\r\n\r\n    const getLatest = async (config: IExchangeRatesLatestArgs) => {\r\n        const query = constructGetLatestQuery(config);\r\n        const { data } = await axios.get(`${baseUrl}/latest${clsx(query)}`);\r\n        return data;\r\n    };\r\n\r\n    const getHistory = async (config: IExchangeRatesHistoryArgs) => {\r\n        const query = constructGetHistoryQuery(config);\r\n        const { data } = await axios.get(`${baseUrl}/history${clsx(query)}`);\r\n        return data;\r\n    };\r\n\r\n    return { getLatest, getHistory };\r\n};","import React from 'react';\r\n\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { roundNumberToXDecimals } from '../../utils';\r\n\r\nimport {\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Paper,\r\n    CircularProgress,\r\n    IconButton\r\n} from '@material-ui/core';\r\nimport TimelineIcon from '@material-ui/icons/Timeline';\r\n\r\nimport { IExchangeRateRow } from '../../types/features/searchConfig';\r\n\r\nimport styles from './index.module.scss';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    container: {\r\n        height: '70vh',\r\n    },\r\n});\r\n\r\ninterface Props {\r\n    rows: Array<IExchangeRateRow>,\r\n    isLoading: Boolean,\r\n    viewHistory: Function\r\n};\r\n\r\nconst ExchangeRatesTable = ({\r\n    rows,\r\n    isLoading,\r\n    viewHistory\r\n}: Props) => {\r\n    const classes = useStyles();\r\n    \r\n    const handleViewHistory = (currency: string) => (): void => {\r\n        viewHistory(currency);\r\n    };\r\n\r\n    return (\r\n        <Paper className={classes.root} elevation={5}>\r\n            <TableContainer className={classes.container}>\r\n                { \r\n                    isLoading ? (\r\n                        <div className={styles.spinner}>\r\n                            <CircularProgress />\r\n                        </div>\r\n                    ) : (\r\n                        <Table stickyHeader aria-label=\"exchange rates table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>Currency</TableCell>\r\n                                    <TableCell align=\"right\">Exchange Rate</TableCell>\r\n                                    <TableCell align=\"right\">Value</TableCell>\r\n                                    <TableCell align=\"right\">History</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {\r\n                                    rows.map((row: IExchangeRateRow) => (\r\n                                        <TableRow key={row.currency}>\r\n                                            <TableCell component=\"th\" scope=\"row\">\r\n                                                <span className={styles.option}>\r\n                                                    <div className={clsx(`currency-flag currency-flag-${row.currency.toLowerCase()}`, styles.flag)}/>\r\n                                                    <span>{row.currency}</span>\r\n                                                </span>\r\n                                            </TableCell>\r\n                                            <TableCell align=\"right\">{row.rate}</TableCell>\r\n                                            <TableCell align=\"right\">{roundNumberToXDecimals(row.value)}</TableCell>\r\n                                            <TableCell align=\"right\">\r\n                                                <IconButton onClick={handleViewHistory(row.currency)} aria-label=\"history\" size=\"small\">\r\n                                                    <TimelineIcon color=\"primary\"/>\r\n                                                </IconButton>\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    ))\r\n                                }\r\n                            </TableBody>\r\n                        </Table>\r\n                    )\r\n                }\r\n            </TableContainer>\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default ExchangeRatesTable;","import React, { useEffect } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { \r\n    selectExchangeRatesTableRows,\r\n    selectIsExchangeRatesIsFetched\r\n} from '../../../redux/selectors/exchangeRates';\r\nimport {\r\n    fetchExchangeRates,\r\n    updateSearchConfig\r\n} from '../../../redux/methods/exchangeRates';\r\n\r\nimport ExchangeRatesTable from '../../../components/ExchangeRatesTable';\r\n\r\nconst ConnectedExchangeRatesTable = ({\r\n    baseCurrency,\r\n    isLoading,\r\n    isFetched,\r\n    exchangeRatesTableRows,\r\n    fetchExchangeRates,\r\n    updateSearchConfig\r\n}: any) => {\r\n    useEffect(() => {\r\n        if (!isFetched) {\r\n            fetchExchangeRates(baseCurrency);\r\n        }\r\n    }, []); //eslint-disable-line\r\n\r\n    const viewHistory = (currency: string): void => {\r\n        updateSearchConfig({ targetCurrency: currency });\r\n    };\r\n\r\n    return (\r\n        <ExchangeRatesTable\r\n            rows={exchangeRatesTableRows}\r\n            isLoading={isLoading}\r\n            viewHistory={viewHistory}\r\n        />\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n    baseCurrency: state.exchangeRates.baseCurrency,\r\n    exchangeRatesTableRows: selectExchangeRatesTableRows(state),\r\n    isLoading: state.exchangeRates.isLoading.exchangeRates,\r\n    isFetched: selectIsExchangeRatesIsFetched(state)\r\n});\r\n\r\nconst mapDispatch = {\r\n    fetchExchangeRates,\r\n    updateSearchConfig\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatch)(ConnectedExchangeRatesTable);","import React, { useState, SyntheticEvent } from 'react';\r\n\r\nimport clsx from 'clsx';\r\n\r\nimport { TextField} from '@material-ui/core';\r\nimport { Autocomplete } from '@material-ui/lab';\r\n\r\nimport styles from './index.module.scss';\r\n\r\ninterface Props {\r\n    value: string,\r\n    setValue: Function,\r\n    options: Array<string>,\r\n    label: string,\r\n    disableClearable?: boolean\r\n}\r\n\r\nconst SearchableSelect = ({\r\n    value,\r\n    setValue,\r\n    options,\r\n    label,\r\n    disableClearable\r\n}: Props) => {\r\n    const [ inputValue, setInputValue ] = useState<string>(value);\r\n\r\n    const handleSetValue = (event: SyntheticEvent<EventTarget>, newValue: any): void => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleOnChangeInputValue = (event: SyntheticEvent<EventTarget>, newInputValue: string): void => {\r\n        setInputValue(newInputValue);\r\n    };\r\n\r\n    return (\r\n        <Autocomplete\r\n            disableClearable={disableClearable}\r\n            value={value}\r\n            onChange={handleSetValue}\r\n            inputValue={inputValue}\r\n            onInputChange={handleOnChangeInputValue}\r\n            options={options}\r\n            clearOnBlur={false}\r\n            renderInput={\r\n                props =>\r\n                    <TextField\r\n                        {...props}\r\n                        variant=\"outlined\"\r\n                        label={label}\r\n                        InputProps={{\r\n                            ...props.InputProps,\r\n                            startAdornment: <div className={clsx(`currency-flag currency-flag-${value.toLowerCase()}`, styles.flag)}/>\r\n                        }}\r\n                    />\r\n            }\r\n            renderOption={\r\n                option =>\r\n                    <span className={styles.option}>\r\n                        <div className={clsx(`currency-flag currency-flag-${option.toLowerCase()}`, styles.flag)}/>\r\n                        <span>{option}</span>\r\n                    </span>\r\n            }\r\n        />\r\n    );\r\n};\r\n\r\nexport default SearchableSelect;","import React, { SyntheticEvent } from 'react';\r\n\r\nimport { TextField } from '@material-ui/core';\r\n\r\ninterface Props {\r\n    label: string,\r\n    value: number,\r\n    setValue: Function\r\n}\r\n\r\nconst NumberInput = ({ label, value, setValue }: Props) => {\r\n    const handleSetValue = (event: SyntheticEvent<EventTarget>): void => {\r\n        const target = event.target as HTMLInputElement;\r\n        setValue(target.value);\r\n    };\r\n    \r\n    return (\r\n        <TextField\r\n            variant=\"outlined\"\r\n            label={label}\r\n            value={value}\r\n            onChange={handleSetValue}\r\n            id={\"number-input\"}\r\n            type=\"number\"\r\n            InputProps={{ inputProps: { min: 0 }}}\r\n        />\r\n    );\r\n};\r\n\r\nexport default NumberInput;","import React from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { fetchExchangeRates, changeAmount } from '../../../redux/methods/exchangeRates';\r\n\r\nimport { Paper } from '@material-ui/core';\r\n\r\nimport SearchableSelect from '../../../components/SearchableSelect';\r\nimport NumberInput from '../../../components/NumberInput';\r\n\r\nimport { CurrenciesEnum } from '../../../enums';\r\n\r\nimport styles from './index.module.scss';\r\n\r\nconst Controls = ({\r\n    baseCurrency,\r\n    amount,\r\n    fetchExchangeRates,\r\n    changeAmount\r\n}: any) => {\r\n    const handleFetchExchangeRates = (baseCurrency: any): void => {\r\n        fetchExchangeRates(baseCurrency);\r\n    };\r\n\r\n    const handleChangeAmount = (amount: any): void => {\r\n        changeAmount(amount);\r\n    };\r\n\r\n    return (\r\n        <Paper elevation={5}>\r\n            <div className={styles.container}>\r\n                <span className={styles.autocomplete}>\r\n                    <SearchableSelect\r\n                        value={baseCurrency}\r\n                        setValue={handleFetchExchangeRates}\r\n                        options={Object.values(CurrenciesEnum)}\r\n                        label=\"Base Currency\"\r\n                        disableClearable\r\n                    />\r\n                </span>\r\n                <span className={styles.number}>\r\n                    <NumberInput\r\n                        value={amount}\r\n                        setValue={handleChangeAmount}\r\n                        label=\"Amount\"\r\n                    />\r\n                </span>\r\n            </div>\r\n        </Paper>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n    baseCurrency: state.exchangeRates.baseCurrency,\r\n    amount: state.exchangeRates.amount\r\n});\r\n\r\nconst mapDispatch = {\r\n    fetchExchangeRates,\r\n    changeAmount\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatch)(Controls);","import React from \"react\";\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { Modal as MaterialModal, Backdrop, Fade } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    paper: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n}));\r\n\r\ninterface Props {\r\n    label: string,\r\n    description: string,\r\n    isOpen: boolean,\r\n    close: Function,\r\n    children: React.ReactElement<any, any>\r\n}\r\n\r\nconst Modal = ({\r\n    label,\r\n    description,\r\n    isOpen,\r\n    close,\r\n    children\r\n}: Props) => {\r\n    const classes = useStyles();\r\n\r\n    const handleClose = (): void => {\r\n        close();\r\n    };\r\n\r\n    return (\r\n        <MaterialModal\r\n            aria-labelledby={label}\r\n            aria-describedby={description}\r\n            open={isOpen}\r\n            onClose={handleClose}\r\n            className={classes.modal}\r\n            closeAfterTransition\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout: 500,\r\n            }}\r\n        >\r\n            <Fade in={isOpen}>\r\n                <div className={classes.paper}>\r\n                    {children}\r\n                </div>\r\n            </Fade>\r\n        </MaterialModal>\r\n    );\r\n};\r\n\r\nexport default Modal;\r\n","import React from 'react';\r\n\r\nimport 'date-fns';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\r\n\r\ninterface Props {\r\n    label: String,\r\n    minDate?: Date,\r\n    maxDate?: Date,\r\n    selectedDate: Date,\r\n    setSelectedDate: Function,\r\n}\r\n\r\nconst DateSelect = ({\r\n    label,\r\n    minDate,\r\n    maxDate,\r\n    selectedDate,\r\n    setSelectedDate\r\n}: Props) => {\r\n    const handleSetSelectedDate = (date: any): void => {\r\n        setSelectedDate(date);\r\n    };\r\n\r\n    return (\r\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n            <KeyboardDatePicker\r\n                required\r\n                disableToolbar\r\n                minDate={minDate}\r\n                maxDate={maxDate}\r\n                variant=\"inline\"\r\n                format=\"dd/MM/yyyy\"\r\n                margin=\"normal\"\r\n                id=\"date-picker\"\r\n                label={label}\r\n                value={selectedDate}\r\n                onChange={handleSetSelectedDate}\r\n                KeyboardButtonProps={{\r\n                    'aria-label': 'change date',\r\n                }}\r\n            />\r\n        </MuiPickersUtilsProvider>\r\n    )\r\n};\r\n\r\nexport default DateSelect;","import React from 'react';\r\n\r\nimport { TrendingDown, TrendingUp, TrendingFlat } from '@material-ui/icons';\r\n\r\ninterface Props {\r\n    progression: string\r\n}\r\n\r\nconst ProgressionIcon = ({ progression }: Props) => {\r\n    switch (progression[0]) {\r\n        case '-': return <TrendingDown fontSize=\"large\" color=\"secondary\"/>\r\n        case '0': return progression[1] === '%' \r\n            ? <TrendingFlat fontSize=\"large\" color=\"disabled\"/>\r\n            : <TrendingUp fontSize=\"large\" style={{ color: 'green' }}/>;\r\n        default: return <TrendingUp fontSize=\"large\" style={{ color: 'green' }}/>;\r\n    }\r\n};\r\n\r\nexport default ProgressionIcon;","import React, { useState, useEffect } from 'react';\r\n\r\nimport clsx from 'clsx';\r\nimport { connect } from 'react-redux';\r\nimport { selectRateHistorySummary } from '../../../redux/selectors/exchangeRates';\r\nimport {\r\n    updateSearchConfig,\r\n    fetchRateHistory,\r\n    clearRateHistory\r\n} from '../../../redux/methods/exchangeRates';\r\n\r\nimport {\r\n    Container,\r\n    Button,\r\n    Paper,\r\n    Typography,\r\n    CircularProgress\r\n} from '@material-ui/core';\r\nimport { Search, ArrowRight } from '@material-ui/icons';\r\n\r\nimport Modal from '../../../components/Modal';\r\nimport DateSelect from '../../../components/DateSelect';\r\nimport ProgressionIcon from '../../../components/ProgressionIcon';\r\n\r\nimport styles from './index.module.scss';\r\n\r\nconst HistoryModal = ({\r\n    baseCurrency,\r\n    rateHistory,\r\n    targetCurrency,\r\n    dateFrom,\r\n    dateTo,\r\n    historySummary,\r\n    isLoading,\r\n    fetchRateHistory,\r\n    clearRateHistory,\r\n    updateSearchConfig,\r\n}: any) => {\r\n    const [ cachedDateFrom, setCachedDateFrom ] = useState<Date>(new Date(dateFrom));\r\n    const [ cachedDateTo, setCachedDateTo ] = useState<Date>(new Date(dateTo));\r\n    const [ cachedTargetCurrency, setCachedTargetCurrency ] = useState<string>(targetCurrency || '');\r\n\r\n    useEffect(() => {\r\n        if (targetCurrency) {\r\n            fetchRateHistory({ targetCurrency, dateFrom, dateTo }, baseCurrency);\r\n            setCachedTargetCurrency(targetCurrency);\r\n        }\r\n    }, [ targetCurrency ]); // eslint-disable-line\r\n\r\n    const handleClose = () => {\r\n        updateSearchConfig({ targetCurrency: null });\r\n        clearRateHistory();\r\n    };\r\n\r\n    const setDateFrom = (date: Date): void => {\r\n        setCachedDateFrom(date);\r\n    };\r\n\r\n    const setDateTo = (date: Date): void => {\r\n        setCachedDateTo(date);\r\n    };\r\n\r\n    const handleSearchRateHistory = () => {\r\n        fetchRateHistory({\r\n            targetCurrency, \r\n            dateFrom: cachedDateFrom, \r\n            dateTo: cachedDateTo\r\n        }, baseCurrency);\r\n    };\r\n\r\n    const isSearchActionBlocked =\r\n        isNaN(cachedDateFrom.getTime())\r\n        || isNaN(cachedDateTo.getTime())\r\n        || cachedDateTo.getTime() < cachedDateFrom.getTime()\r\n        || cachedDateTo.getTime() > new Date().getTime()\r\n    ;\r\n\r\n    return (\r\n        <Modal\r\n            label=\"exchange rate history modal\"\r\n            description=\"shows detailed history of currency exchange rate\"\r\n            isOpen={targetCurrency ? true : false}\r\n            close={handleClose}\r\n        >\r\n            <Container>\r\n                <header className={styles.header}>\r\n                    <span className={styles.title}>\r\n                        <Typography noWrap variant=\"h6\" component=\"span\">\r\n                            Rate history for:\r\n                        </Typography>\r\n                        <span className={styles.titleAdorment}>\r\n                            <span className={styles.option}>\r\n                                <div className={clsx(`currency-flag currency-flag-${baseCurrency.toLowerCase()}`, styles.flag)}/>\r\n                                <span>{baseCurrency}</span>\r\n                            </span>\r\n                            <ArrowRight />\r\n                            <span className={styles.option}>\r\n                                <div className={clsx(`currency-flag currency-flag-${cachedTargetCurrency.toLowerCase()}`, styles.flag)}/>\r\n                                <span>{cachedTargetCurrency}</span>\r\n                            </span>\r\n                        </span>\r\n                    </span>\r\n                    <span className={styles.controls}>\r\n                        <span className={styles.input}>\r\n                            <DateSelect\r\n                                label=\"Starting Date\"\r\n                                maxDate={cachedDateTo || new Date()}\r\n                                selectedDate={cachedDateFrom}\r\n                                setSelectedDate={setDateFrom}\r\n                            />\r\n                        </span>\r\n                        <span className={styles.input}>\r\n                            <DateSelect\r\n                                label=\"Ending Date\"\r\n                                minDate={cachedDateFrom}\r\n                                maxDate={new Date()}\r\n                                selectedDate={cachedDateTo}\r\n                                setSelectedDate={setDateTo}\r\n                            />\r\n                        </span>\r\n                        <span className={styles.button}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                size=\"large\"\r\n                                startIcon={<Search />}\r\n                                disabled={isSearchActionBlocked}\r\n                                onClick={handleSearchRateHistory}\r\n                            >\r\n                                Search\r\n                            </Button>\r\n                        </span>\r\n                    </span>\r\n                </header>\r\n                <Paper elevation={3}>\r\n                    <main className={styles.main}>\r\n                        {\r\n                            historySummary ? (\r\n                                <>\r\n                                    <span className={styles.dates}>\r\n                                        <Typography variant=\"body2\" component=\"span\">\r\n                                            <strong>Opening rate</strong>\r\n                                            {` (${historySummary.earliest.date}): ${historySummary.earliest.rate}`}\r\n                                        </Typography>\r\n                                        <Typography variant=\"body2\" component=\"span\">\r\n                                            <strong>Closing rate</strong>\r\n                                            {` (${historySummary.oldest.date}): ${historySummary.oldest.rate}`}\r\n                                        </Typography>\r\n                                    </span>\r\n                                    <span className={styles.progression}>\r\n                                        <Typography variant=\"h6\" component=\"span\">\r\n                                            {historySummary.progression}\r\n                                        </Typography>\r\n                                        <ProgressionIcon progression={historySummary.progression}/>\r\n                                    </span>\r\n                                </>\r\n                            ) : isLoading\r\n                                ? (\r\n                                    <CircularProgress />\r\n                                ) : rateHistory.length > 0 && (\r\n                                    <Typography variant=\"body2\" component=\"span\">\r\n                                        Not enough data to calculate rate progression for given date range.\r\n                                    </Typography>\r\n                                )\r\n                        }\r\n                        \r\n                    </main>\r\n                </Paper>\r\n            </Container>\r\n        </Modal>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n    baseCurrency: state.exchangeRates.baseCurrency,\r\n    targetCurrency: state.exchangeRates.rateHistorySearchConfig.targetCurrency,\r\n    dateFrom: state.exchangeRates.rateHistorySearchConfig.dateFrom,\r\n    dateTo: state.exchangeRates.rateHistorySearchConfig.dateTo,\r\n    historySummary: selectRateHistorySummary(state),\r\n    isLoading: state.exchangeRates.isLoading.rateHistory,\r\n    rateHistory: state.exchangeRates.result.rateHistory\r\n});\r\n\r\nconst mapDispatch = {\r\n    updateSearchConfig,\r\n    fetchRateHistory,\r\n    clearRateHistory\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatch)(HistoryModal);","import React from \"react\";\n\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { store, persistor } from \"./redux/store\";\n\nimport { Container } from '@material-ui/core';\n\nimport ConnectedExchangeRatesTable from './features/exchangeRates/ConnectedExchangeRatesTable';\nimport Controls from './features/exchangeRates/Controls';\nimport HistoryModal from './features/exchangeRates/HistoryModal';\n\nimport 'currency-flags/dist/currency-flags.css';\nimport styles from './App.module.scss';\n\nconst App = () => {\n\treturn (\n\t\t<Provider store={store}>\n\t\t\t<PersistGate loading={null} persistor={persistor}>\n\t\t\t\t<Container maxWidth=\"md\">\n\t\t\t\t\t<section className={styles.section}>\n\t\t\t\t\t\t<header className={styles.controls}>\n\t\t\t\t\t\t\t<Controls />\n\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<main className={styles.table}>\n\t\t\t\t\t\t\t<ConnectedExchangeRatesTable />\n\t\t\t\t\t\t</main>\n\t\t\t\t\t</section>\n\t\t\t\t\t<HistoryModal />\n\t\t\t\t</Container>\n\t\t\t</PersistGate>\n\t\t</Provider>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nReactDOM.render(\n\t<App />,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"HistoryModal_header__2ut0k\",\"option\":\"HistoryModal_option__1KCwV\",\"flag\":\"HistoryModal_flag__3J0Tc\",\"title\":\"HistoryModal_title__287k5\",\"titleAdorment\":\"HistoryModal_titleAdorment__lZUFR\",\"controls\":\"HistoryModal_controls__hNUmr\",\"input\":\"HistoryModal_input__3uyvm\",\"button\":\"HistoryModal_button__2Ct7R\",\"main\":\"HistoryModal_main__2M3KC\",\"dates\":\"HistoryModal_dates__oZel1\",\"progression\":\"HistoryModal_progression__39mzV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"option\":\"ExchangeRatesTable_option__1_cuc\",\"flag\":\"ExchangeRatesTable_flag__3Dqoh\",\"spinner\":\"ExchangeRatesTable_spinner__2a_Gc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"option\":\"SearchableSelect_option__CsJJR\",\"flag\":\"SearchableSelect_flag__3jsR5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Controls_container__1HuU8\",\"autocomplete\":\"Controls_autocomplete__KCKbI\",\"number\":\"Controls_number__1wJFR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"App_section__1pkbE\",\"controls\":\"App_controls__B6h2i\"};"],"sourceRoot":""}